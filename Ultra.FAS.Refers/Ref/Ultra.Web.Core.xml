<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ultra.Web.Core</name>
    </assembly>
    <members>
        <member name="T:Ultra.Web.Core.Class.SendMail">
            <summary>
            发送Email类
            </summary>
        </member>
        <member name="M:Ultra.Web.Core.Class.SendMail.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>  
            处审核后类的实例  
            </summary>  
            <param name="To">收件人地址</param>  
            <param name="From">发件人地址</param>  
            <param name="Body">邮件正文</param>  
            <param name="Title">邮件的主题</param>  
            <param name="Password">发件人密码</param>  
        </member>
        <member name="M:Ultra.Web.Core.Class.SendMail.Attachments(System.String)">
            <summary>  
            添加附件  
            </summary>  
        </member>
        <member name="M:Ultra.Web.Core.Class.SendMail.SendAsync(System.Net.Mail.SendCompletedEventHandler)">
            <summary>  
            异步发送邮件  
            </summary>  
            <param name="CompletedMethod"></param>  
        </member>
        <member name="M:Ultra.Web.Core.Class.SendMail.Send(System.String,System.String)">
            <summary>  
            发送邮件  
            </summary>  
        </member>
        <member name="T:Ultra.Web.Core.Class.MockSession">
            <summary>
            IMockSession接口的默认实现,用cookie模拟实现Session也即带超时的cookie 默认20分钟超时
            NOTE:要存放于MockSession中的类必须支持序列化与反序列化
            </summary>
        </member>
        <member name="T:Ultra.Web.Core.Interface.IMockSession">
            <summary>
            通过cookie模拟的Session实现的接口定义
            </summary>
        </member>
        <member name="M:Ultra.Web.Core.Interface.IMockSession.SeriesObjectJson(System.Object)">
            <summary>
            序列化对象为Json
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Ultra.Web.Core.Interface.IMockSession.AllKeys">
            <summary>
            获取所有的键
            </summary>
        </member>
        <member name="M:Ultra.Web.Core.Class.MockSession.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="expireMinute">默认超时的分钟数</param>
        </member>
        <member name="F:Ultra.Web.Core.Class.MockSession.dicKey">
            <summary>
            内部用于记录key的字典
            </summary>
        </member>
        <member name="M:Ultra.Web.Core.Class.MockSession.SeriesObjectJson(System.Object)">
            <summary>
            序列化对象为Json
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Ultra.Web.Core.Class.MockSession.Item(System.String)">
            <summary>
            索引器 类似Session般操作
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Ultra.Web.Core.Class.MockSession.AllKeys">
            <summary>
            所有的键
            </summary>
        </member>
        <member name="T:Ultra.Web.Core.Class.UltraMockSession`1">
            <summary>
            IMockSession接口的默认泛型实现,用cookie模拟实现Session也即带超时的cookie 默认20分钟超时
            NOTE:要存放于MockSession中的类必须支持序列化与反序列化
            </summary>
            <typeparam name="T">必须支持序列化与反序列化</typeparam>
        </member>
        <member name="P:Ultra.Web.Core.Class.UltraMockSession`1.Index">
            <summary>
            静态索引器.避免使用本类时需要重复创建对象
            </summary>
        </member>
        <member name="P:Ultra.Web.Core.Class.UltraMockSession`1.Item(System.String)">
            <summary>
            索引器 类似Session般操作
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Ultra.Web.Core.Class.UltraMockSession`1.AllKeys">
            <summary>
            所有的键
            </summary>
        </member>
        <member name="T:Ultra.Web.Core.Class.UltraCookie`1">
            <summary>
            支持序列化对象的cookie
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Ultra.Web.Core.Interface.IUltraCookie`1">
            <summary>
            支持存储序列化对象的Cookie扩展/增强
            </summary>
        </member>
        <member name="M:Ultra.Web.Core.Interface.IUltraCookie`1.SeriesObjectJson(System.Object)">
            <summary>
            序列化对象为Json
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Interface.IUltraCookie`1.DeSeriesObject``1(System.String)">
            <summary>
            反序列化对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsvlu"></param>
            <returns></returns>
        </member>
        <member name="P:Ultra.Web.Core.Interface.IUltraCookie`1.AllKeys">
            <summary>
            获取所有的键
            </summary>
        </member>
        <member name="M:Ultra.Web.Core.Class.UltraCookie`1.SeriesObjectJson(System.Object)">
            <summary>
            对象序列化方法
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Class.UltraCookie`1.DeSeriesObject``1(System.String)">
            <summary>
            反序列化对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsvlu"></param>
            <returns></returns>
        </member>
        <member name="P:Ultra.Web.Core.Class.UltraCookie`1.Index">
            <summary>
            静态索引器 避免使用本类时重复创建对象
            </summary>
        </member>
        <member name="P:Ultra.Web.Core.Class.UltraCookie`1.Item(System.String)">
            <summary>
            设置/返回对象
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Ultra.Web.Core.Class.UltraCookie`1.AllKeys">
            <summary>
            返回Cookie中的所有键名称
            </summary>
        </member>
        <member name="T:Ultra.Web.Core.Common.ByteStringUtil">
            <summary>
            字节数组与字符串转换帮助类
            </summary>
        </member>
        <member name="M:Ultra.Web.Core.Common.ByteStringUtil.ByteArrayFromHexStr(System.String)">
            <summary>
            将十六进制长串 每两个字符解释为一个字节 转换为对应的字节数组返回
            </summary>
            <param name="hexStr">十六进制串若带前缀</param>
            <returns>转换为对应的字节数组,若转换失败返回null</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.ByteStringUtil.ByteArrayToHexStr(System.Byte[])">
            <summary>
            将字节数组转换为对应的十六进制串,每一个字节转换为两个字符
            </summary>
            <param name="bytdata">字节数组</param>
            <returns>转换后的十六进制字符串,若转换失败则返回string.Empty</returns>
        </member>
        <member name="T:Ultra.Web.Core.Common.ChineseDate">
            <summary>
            公农历转换
            </summary>
        </member>
        <member name="M:Ultra.Web.Core.Common.ChineseDate.GetLunarCalendar(System.DateTime)">
            <summary>
            获取对应日期的农历 
            </summary>
            <param name="dtDay"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.ChineseDate.GetDate(System.DateTime)">
            <summary>
            获取对应日期的农历
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="T:Ultra.Web.Core.Common.DESEncrypt">
            <summary>
            DES加解密帮助类
            </summary>
        </member>
        <member name="M:Ultra.Web.Core.Common.DESEncrypt.Encrypt(System.Byte[],System.String)">
            <summary>
            加密
            </summary>
            <param name="srcData">源数据</param>
            <param name="strKey">密钥</param>
            <returns>密文字节数组,若加密失败则返回null</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.DESEncrypt.Decrypt(System.Byte[],System.String)">
            <summary>
            解密
            </summary>
            <param name="srcData">源数据</param>
            <param name="strKey">密钥</param>
            <returns>解密后的字节数组,若解密失败则返回null</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.DESEncrypt.EncryptString(System.String,System.String)">
            <summary>
            3DES加密字符串
            </summary>
            <param name="srcString">待加密的字符串</param>
            <param name="strKey">用于加密的密钥</param>
            <returns>加密完成后的结果</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.DESEncrypt.DecryptString(System.String,System.String)">
            <summary>
            3DES解密字符串
            </summary>
            <param name="srcString">待解密的字符串(此参数的值应当是调用EncryptString所得的结果)</param>
            <param name="strKey">用于加密的密钥</param>
            <returns>解密完成后的结果</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.DESEncrypt.EncryptString(System.String)">
            <summary>
            加密字符串
            </summary>
            <param name="srcStr"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.DESEncrypt.DecryptString(System.String)">
            <summary>
            解密字符串
            </summary>
            <param name="srcStr"></param>
            <returns></returns>
        </member>
        <member name="P:Ultra.Web.Core.Common.DESEncrypt.DefaultKey">
            <summary>
            默认密钥
            </summary>
        </member>
        <member name="T:Ultra.Web.Core.Common.UltraMailSender">
            <summary>
            邮件发送帮助类
            </summary>
        </member>
        <member name="M:Ultra.Web.Core.Common.UltraMailSender.SendMail(System.String,System.String,System.String[])">
            <summary>
            发送邮件
            </summary>
            <param name="title">主题</param>
            <param name="body">内容</param>
            <param name="attachFile">附件</param>
        </member>
        <member name="P:Ultra.Web.Core.Common.UltraMailSender.SenderEMail">
            <summary>
            发件人邮箱地址
            </summary>
        </member>
        <member name="P:Ultra.Web.Core.Common.UltraMailSender.SenderName">
            <summary>
            发件人显示名称
            </summary>
        </member>
        <member name="P:Ultra.Web.Core.Common.UltraMailSender.SenderPwd">
            <summary>
            发件人邮箱登录密码
            </summary>
        </member>
        <member name="P:Ultra.Web.Core.Common.UltraMailSender.SmtpSvr">
            <summary>
            smtp服务器地址
            </summary>
        </member>
        <member name="P:Ultra.Web.Core.Common.UltraMailSender.RecverMailAddr">
            <summary>
            收件箱地址
            </summary>
        </member>
        <member name="P:Ultra.Web.Core.Common.UltraMailSender.IsBodyHtml">
            <summary>
            是否HTML邮件
            </summary>
        </member>
        <member name="T:Ultra.Web.Core.Common.GlobalMemory">
            <summary>
            共享内存操作类
            </summary>
        </member>
        <member name="M:Ultra.Web.Core.Common.GlobalMemory.Init(System.String,System.Int64)">
            <summary>
            初始化共享内存
            </summary>
            <param name="strName">共享内存名称</param>
            <param name="lngSize">共享内存大小</param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.GlobalMemory.Close">
            <summary>
            关闭共享内存
            </summary>
        </member>
        <member name="M:Ultra.Web.Core.Common.GlobalMemory.Read(System.Byte[]@,System.Int32,System.Int32)">
            <summary>
            读数据
            </summary>
            <param name="bytData">数据</param>
            <param name="lngAddr">起始地址</param>
            <param name="lngSize">个数</param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.GlobalMemory.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            写数据
            </summary>
            <param name="bytData">数据</param>
            <param name="lngAddr">起始地址</param>
            <param name="lngSize">个数</param>
            <returns></returns>
        </member>
        <member name="T:Ultra.Web.Core.Common.DigestType">
            <summary>
            摘要算法枚举
            </summary>
        </member>
        <member name="T:Ultra.Web.Core.Common.HashDigest">
            <summary>
            摘要算法辅助类
            </summary>
        </member>
        <member name="M:Ultra.Web.Core.Common.HashDigest.FileDigest(System.String,Ultra.Web.Core.Common.DigestType)">
            <summary>
            获取文件哈希值
            </summary>
            <param name="filePath">文件路径</param>
            <param name="dgType">指定哈希算法</param>
            <returns>成功返回计算得到的哈希字节数组,否则为null</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.HashDigest.FileDigest(System.String)">
            <summary>
            获取文件MD5哈希值
            </summary>
            <param name="filePath">文件路径</param>
            <returns>成功返回计算得到的哈希字节数组,否则为null</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.HashDigest.StringDigest(System.String,Ultra.Web.Core.Common.DigestType)">
            <summary>
            计算字符串哈希
            </summary>
            <param name="strSrc">欲计算哈希的字符串</param>
            <param name="dgType">指定哈希算法</param>
            <returns>成功返回计算得到的哈希字节数组,否则为null</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.HashDigest.StringDigest(System.String)">
            <summary>
            计算字符串MD5哈希
            </summary>
            <param name="strSrc">欲计算哈希的字符串</param>
            <returns>成功返回计算得到的哈希字节数组,否则为null</returns>
        </member>
        <member name="T:Ultra.Web.Core.Common.ManualResetEventEx">
            <summary> 
            封装ManualResetEvent 
            </summary> 
        </member>
        <member name="M:Ultra.Web.Core.Common.ManualResetEventEx.#ctor(System.Int32)">
            <summary> 
            构造函数 
            </summary> 
            <param name="total">需要等待执行的线程总数</param> 
        </member>
        <member name="M:Ultra.Web.Core.Common.ManualResetEventEx.SetOne">
            <summary> 
            唤醒一个等待的线程 
            </summary> 
        </member>
        <member name="M:Ultra.Web.Core.Common.ManualResetEventEx.WaitAll">
            <summary> 
            等待所以线程执行完毕 
            </summary> 
        </member>
        <member name="M:Ultra.Web.Core.Common.ManualResetEventEx.Dispose">
            <summary> 
            释放对象占用的空间 
            </summary> 
        </member>
        <member name="T:Ultra.Web.Core.Common.MethodExtend">
            <summary>
            扩展方法集
            </summary>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.SqlKeyCharFilter(System.String,System.String)">
            <summary>
            过滤替换字符串中的SQL关键字字符串如:([,]*%...)
            </summary>
            <param name="str"></param>
            <param name="strFilter">需要被过滤的字符串内容</param>
            <returns>过滤完成后的结果</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.IsHtmlContainImg(System.String)">
            <summary>
            返回字符串是否包含  HTML标签 &lt;Img src=..../>
            </summary>
            <param name="htmlstr"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.FilterStringReplace(System.String)">
            <summary>
            特殊查询字符串过滤
            </summary>
            <param name="src">查询字符串</param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.Left(System.String,System.String,System.Int32)">
            <summary>
            返回字符串左起 length 个字符
            </summary>
            <param name="str"></param>
            <param name="strSrc">截取该字符串左起 length个字符</param>
            <param name="length">返回的字符数</param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.Left(System.String,System.Int32)">
            <summary>
            返回字符串左起 length 个字符
            </summary>
            <param name="src"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.Left(System.String,System.Int32,System.String)">
            <summary>
            返回字符串左起 length 个字符
            如果字符串原始长度比length小或相等则返回原始字符串
            否则返回字符串左起 length 个字符并在末尾连接上apend中指定的字符
            </summary>
            <param name="src">从中进行截取的字符串</param>
            <param name="length">截取的长度</param>
            <param name="apend">要在末尾连接上的字符内容</param>
            <returns>返回字符串左起 length 个字符</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.EqualIgnorCase(System.String,System.String)">
            <summary>
            忽略字符串大小写的比较
            </summary>
            <param name="src">被比较的字符串</param>
            <param name="cmp">被比较的字符串</param>
            <returns>如果忽略大小写的比较相等则返回true否则为false</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.ToBytes(System.String)">
            <summary>
            将字符串转换为字节数组
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.ToBytes(System.String,System.Text.Encoding)">
            <summary>
            将字符串以指定的编码格式转换为字节数组
            </summary>
            <param name="src"></param>
            <param name="coding"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.ToEncodeStr(System.String,System.Text.Encoding)">
            <summary>
            转换编码显示的字符串
            </summary>
            <param name="src"></param>
            <param name="coding"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.ToBase64(System.String)">
            <summary>
            转换 为 Base64编码输出
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.FromBase64(System.String)">
            <summary>
            将Base64编码的数据转换为编码前的数据
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.HexStrToBytes(System.String)">
            <summary>
            将以十六进制表示的字符串转换为对应的字节数组
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.CanConnToDBServer(System.String)">
            <summary>
            字符串若为连接字符串,则尝试使用此连接串连接到目标数据库
            如果无法连接成功则返回false
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.ReadFirstLine(System.String,System.Text.Encoding)">
            <summary>
            读取指定路径的文件的首行,如果文件不存在,则返回string.Empty
            </summary>
            <param name="filePath"></param>
            <param name="enc">文件编码方式</param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.CanOpen(System.String)">
            <summary>
            尝试打开文件,如果文件被占用则打开失败返回false,否则返回true
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.FileExists(System.String)">
            <summary>
            判断指定的字符串表示的文件是否存在
            </summary>
            <param name="filePath">字符串表示的文件</param>
            <returns>存在返回true</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.ChangeType``1(System.String)">
            <summary>
            转换string为对应的目标类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="str">内容</param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.CanOpen(System.String,System.String@)">
            <summary>
            尝试打开文件,如果文件被占用则打开失败返回false,否则返回true
            </summary>
            <param name="filePath"></param>
            <param name="errmsg"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.ReadFirstLine(System.String)">
            <summary>
            读取指定路径的文件的首行,如果文件不存在,则返回string.Empty
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.UrlEncode(System.String)">
            <summary>
            HttpUtility.UrlEncode(url)
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.UrlEncode(System.String,System.Text.Encoding)">
            <summary>
            HttpUtility.UrlEncode(url,enc)
            </summary>
            <param name="url"></param>
            <param name="enc"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.UrlDecode(System.String,System.Text.Encoding)">
            <summary>
            HttpUtility.UrlDecode(url,enc)
            </summary>
            <param name="url"></param>
            <param name="enc"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.UrlDecode(System.String)">
            <summary>
            HttpUtility.UrlDecode(url)
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.HtmlEncode(System.String)">
            <summary>
            HttpUtility.HtmlEncode(str);
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.HtmlDecode(System.String)">
            <summary>
            HttpUtility.HtmlDecode(str)
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.Hash(System.String)">
            <summary>
            返回哈希字符串
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.FileHash(System.String)">
            <summary>
            返回文件哈希值(MD5)
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ultra.Web.Core.Common.MethodExtend.AsQueryString(System.String)" -->
        <member name="M:Ultra.Web.Core.Common.MethodExtend.IgnoreCaseEqual(System.String,System.String)">
            <summary>
            比較兩字符串(忽略大小寫)是否相等
            </summary>
            <param name="str">用於比較的字符串</param>
            <param name="str2">用於比較的字符串</param>
            <returns>字符串相等則返回true,否則為false</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.LoadAsMemAsm(System.String)">
            <summary>
            将字符串所表示的路径指向的程序集文件加载为内存程序集
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.GetAllClassOfClass(System.String,System.Type)">
            <summary>
            获取字符串所表示的路径指向的程序集文件程序集内继承自指定类的所有子类列表
            </summary>
            <param name="str">字符串所表示的路径指向的程序集文件</param>
            <param name="tbase">指定的基类</param>
            <returns>所有子类列表</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.GetBetween(System.String,System.String,System.String)">
            <summary>
            从源字符串str中得到  strStart 与 strEnd之间 的内容
            无法匹配成功则返回string.Empty
            </summary>
            <param name="str">源字符串</param>
            <param name="strStart">起始串</param>
            <param name="strEnd">结束串</param>
            <returns>从源字符串str中得到  strStart 与 strEnd之间 的内容</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.ReplaceBetween(System.String,System.String,System.String,System.String)">
            <summary>
            替换源字符串str中  strStart 与 strEnd之间 的内容
            为 rep中指定的内容
            无法匹配成功则返回string.Empty
            </summary>
            <param name="str">源字符串</param>
            <param name="strStart">起始串</param>
            <param name="strEnd">结束串</param>
            <param name="rep">替换为的内容</param>
            <returns>替换后的结果</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.Thumnail(System.String,System.Int32,System.Int32)">
            <summary>
            将srcImgPath指定处的图片转化为指定宽高的缩略图
            会对参数中的路径做Server.MapPath
            </summary>
            <param name="srcImgPath"></param>
            <param name="width">缩略的宽</param>
            <param name="height">缩略的高</param>
            <returns>转换后的图片对象</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.IsIPAddress(System.String)">
            <summary>
            验证一给定的字符串是否是IP地址表示形式
            </summary>
            <param name="str"></param>
            <returns>如果是IP地址表示形式则返回true,否则为false</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.IsAllChineseChar(System.String)">
            <summary>
            判断指定的字符串是不是全部是汉字
            </summary>
            <param name="str">欲判断的字符串</param>
            <returns>若为全包含汉字则返回true,否则为false</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.GetPinyin(System.String)">
            <summary>    
            汉字转化为拼音   
            </summary>    
            <param name="str">汉字</param>    
            <returns>全拼</returns>    
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.GetShortPinyin(System.String)">
            <summary>    
            汉字转化为拼音首字母   
            </summary>    
            <param name="str">汉字</param>    
            <returns>首字母</returns>    
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.ToInt(System.String)">
            <summary>
            转换为int
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.ToInt(System.String,System.Int32)">
            <summary>
            转换为int
            </summary>
            <param name="str"></param>
            <param name="defaultvalue"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.ValidMobileNumber(System.String)">
            <summary>
            验证手机号有效性
            有效返回true否则为false
            </summary>
            <param name="phoneNum"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.IsMobileNum(System.String)">
            <summary>
            判断是否为有效的手机号码
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.ToLong(System.String)">
            <summary>
            转换为long
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.ToLong(System.String,System.Int64)">
            <summary>
            转换为long
            </summary>
            <param name="str"></param>
            <param name="defaultvalue">如果转换不成功需要被返回的默认值</param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.ToDecimal(System.String)">
            <summary>
            转换为decimal
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.ToDecimal(System.String,System.Decimal)">
            <summary>
            转换为decimal
            </summary>
            <param name="str"></param>
            <param name="defaultvalue"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.ToInt(System.Int64)">
            <summary>
            转换为int
            </summary>
            <param name="lng"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.GetGuidStr(System.String)">
            <summary>
            生成Guid.NewGuid().ToString()去掉连接符后的文字内容
            </summary>
            <param name="str"></param>
            <returns>生成Guid.NewGuid().ToString()去掉连接符后的文字内容</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.ParseCmdArgs(System.String[])">
            <summary>
            解析命行令参数
            </summary>
            <param name="cmdArgs">命行令参数</param>
            <returns>KEY:命令行参数名称.如:/cfg VALUE:命令行参数值.如:C:\windows</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.GetPathInfo(System.String)">
            <summary>
            解析路径信息
            </summary>
            <param name="filePath">文件路径信息</param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.GenerateThumbNail(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            对图片文件生成缩略图
            </summary>
            <param name="sourcefile">原始图片文件</param>
            <param name="destinationfile">生成的缩略图文件</param>
            <param name="width">缩略的宽度</param>
            <param name="height">缩略的高度</param>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.ThumbnailImage(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            对图片文件生成缩略图
            </summary>
            <param name="sourcefile">原始图片文件</param>
            <param name="destinationfile">生成的缩略图文件</param>
            <param name="width">缩略的宽度</param>
            <param name="height">缩略的高度</param>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.CombinImage(System.String,System.String,System.String,System.Drawing.Point,Ultra.Web.Core.Common.EnImageCombinOrd,System.Boolean)">
            <summary>
            图片合成
            </summary>
            <param name="srcFile">源图文件路径</param>
            <param name="combinFile">需要被合成到源图中的文件路径</param>
            <param name="destFile">合成后的图片输出路径</param>
            <param name="pt">combinFile要合成到srcFile中的起始位置坐标</param>
            <param name="encmb">当值为EnImageCombinOrd.Reverse则将会把combinFile画到srcFile图像的背后 否则 为前面.默认值为EnImageCombinOrd.Reverse</param>
            <param name="buseadjust">默认为true.内容会开启合成后的图片质量微调</param>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.ImageSize(System.String)">
            <summary>
            返回图片文件的宽高.如果图片不存在返回 宽:0,高:0
            </summary>
            <param name="srcFile">图片文件路径</param>
            <returns>返回图片文件的宽高.如果图片不存在返回 宽:0,高:0</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.Calc(System.String)">
            <summary>
            计算字符串表达式结果
            </summary>
            <param name="exp">运算表达式.例如:3*5+8/2-1</param>
            <returns>表达式计算完成后的结果</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.GetMimeTypeString(System.String)">
            <summary>
            根据文件后缀名获取文件的媒体类型。
            </summary>
            <param name="fileName">带后缀的文件名或文件全名</param>
            <returns>媒体类型</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.GetMimeType(System.String)">
            <summary>
            根据文件后缀名获取文件的媒体类型。
            </summary>
            <param name="filename">带后缀的文件名或文件全名</param>
            <returns>媒体类型.返回值例如:image/bmp,image/png,...application/octet-stream</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.GetFileSuffix(System.Byte[])">
            <summary>
            获取文件的真实后缀名。目前只支持JPG, GIF, PNG, BMP四种图片文件。
            </summary>
            <param name="fileData">文件字节流</param>
            <returns>JPG, GIF, PNG or null</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.GetFileExtName(System.Byte[])">
            <summary>
            获取文件的真实后缀名。目前只支持JPG, GIF, PNG, BMP四种图片文件。
            </summary>
            <param name="fileData">文件字节流</param>
            <returns>JPG, GIF, PNG or null</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.GetMimeTypeString(System.Byte[])">
            <summary>
            获取文件的真实媒体类型。目前只支持JPG, GIF, PNG, BMP四种图片文件。
            </summary>
            <param name="fileData">文件字节流</param>
            <returns>媒体类型</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.GetMimeType(System.Byte[])">
            <summary>
            获取文件的真实媒体类型。目前只支持JPG, GIF, PNG, BMP四种图片文件。
            </summary>
            <param name="fileData">文件字节流</param>
            <returns>媒体类型</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.GetAsyncConnString(System.String)">
            <summary>
            将指定的连接字符串转换为支持异步数据查询的连接串
            </summary>
            <param name="connstr">原始连接字符串</param>
            <returns>支持异步数据查询的连接串</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.IsNum(System.String)">
            <summary>
            验证字符串是否为数字
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.IsNullOrEmpty(System.String)">
            <summary>
            验证字符串是否为空
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.Split(System.String,System.String)">
            <summary>
            将字符串按指定字符拆分
            </summary>
            <param name="str"></param>
            <param name="splt"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.ToException(System.String)">
            <summary>
            用指定的字符串信息生成Exception对象
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.TrimColumnName(System.Data.DataTable)">
            <summary>
            将DataTable的列名称进行 Trim 截取 并返回截取操作完成后的所有列的列名称集合
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.WriteToServer(System.Data.DataTable,System.String,System.String,System.String[])">
            <summary>
            将DataTable数据写入到由参数tbName指定的表中
            </summary>
            <param name="dt"></param>
            <param name="connstr">连接串</param>
            <param name="tbName">写入到的目标表名</param>
            <param name="tbFields">需要写入的DataTable中的列的名称集合</param>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.ToEntity``1(System.Data.DataTable)">
            <summary>
            将数据表对象转化为特定的对象集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.GetChinaDate(System.DateTime)">
            <summary>
            获取对应日期的农历
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.DateDiff(System.DateTime,Ultra.Web.Core.Common.EnDatePart,System.DateTime)">
            <summary>
            返回 当前日期对象减去 d2 在指定日期部分的差值
            </summary>
            <param name="d"></param>
            <param name="enDatePrt"></param>
            <param name="d2"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.DateDiff(Ultra.Web.Core.Common.EnDatePart,System.DateTime,System.DateTime)">
            <summary>
            获取两个日期(de2-de1)
            之间指定日期部分的差值
            与Diff函数的区别在于会考虑 年月日部分的差异
            </summary>
            <param name="enDatePrt">日期部分</param>
            <param name="de1">开始日期</param>
            <param name="de2">结束日期</param>
            <returns>两个日期(de2-de1)之间指定日期部分的差值</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.SyncYearMonthDay(System.DateTime,System.DateTime)">
            <summary>
            将日期的年月日部分同步为 de2指定的年月日部分
            </summary>
            <param name="deOri"></param>
            <param name="de2"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.UpdateYearMonthDay(System.DateTime,System.DateTime)">
            <summary>
            更新日期的年月日部分为参数 de 的年月日
            </summary>
            <param name="deOri"></param>
            <param name="de"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.ToDefaultStr(System.Nullable{System.DateTime})">
            <summary>
            转换为 yyyy-MM-dd HH:mm:ss 格式的日期字符串
            </summary>
            <param name="de"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.ToDefaultStr(System.DateTime)">
            <summary>
            转换为 yyyy-MM-dd HH:mm:ss 格式的日期字符串
            </summary>
            <param name="de"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.IsTimePartEqual(System.DateTime,System.DateTime)">
            <summary>
            比较两个日期区间范围的时分秒部分是否一致
            </summary>
            <param name="deOri"></param>
            <param name="de2"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.IsDatePartEqual(System.DateTime,System.DateTime)">
            <summary>
            比较两个日期区间范围的年月日部分是否一致
            </summary>
            <param name="deOri"></param>
            <param name="de2"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.Split(System.DateTime,System.DateTime,System.Int32)">
            <summary>
            将两个日期区间范围按指定的天数拆分
            </summary>
            <param name="begin"></param>
            <param name="end"></param>
            <param name="days"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.SplitDateRange(System.DateTime,System.DateTime,System.Int32)">
            <summary>
            将指定日期以指定的天数进行拆分
            </summary>
            <param name="begin"></param>
            <param name="end"></param>
            <param name="days"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.Swap(System.DateTime,System.DateTime@)">
            <summary>
            比较两个日期返回日期较大的一个,在输出 参数中返回日期较小的一个
            </summary>
            <param name="deOri"></param>
            <param name="deCmp"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.GetDataTable``1(System.Collections.Generic.IList{``0},System.String[])">
            <summary>
            根据当前列表对象数据映射成对应的DataTable结构
            </summary>
            <typeparam name="T">列表元素对象类型</typeparam>
            <param name="lstT">列表数据</param>
            <param name="propertyArgs">需要映射的类型T的属性字段名称</param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.GetDataTableEx``1(System.Collections.Generic.IList{``0},System.String[])">
            <summary>
            根据当前列表对象数据映射成对应的DataTable结构
            </summary>
            <typeparam name="T">列表元素对象类型</typeparam>
            <param name="lstT">列表数据</param>
            <param name="propOrFields">需要映射的类型T的属性字段及字段名称</param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.WriteToServer``1(System.Data.SqlClient.SqlBulkCopy,System.Collections.Generic.IList{``0},System.String[])">
            <summary>
            将lstT中的数据批量写入至目标数据表中
            </summary>
            <typeparam name="T">列表元素对象类型</typeparam>
            <param name="blk">SqlBulkCopy对象</param>
            <param name="lstT">列表数据</param>
            <param name="propertyArgs">需要映射的类型T的属性字段名称</param>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.WriteToServer``1(System.Data.SqlClient.SqlBulkCopy,System.Collections.Generic.IList{``0},System.Func{System.Data.DataTable,System.Data.DataTable})">
            <summary>
            将lstT中的数据批量写入至目标数据表中
            </summary>
            <typeparam name="T">列表元素对象类型</typeparam>
            <param name="blk">SqlBulkCopy对象</param>
            <param name="lstT">列表数据</param>
            <param name="fnc">传递列表数据转换得到的DataTable,回调函数可以在此回调内移除指定列以达到不回写特定字段至目标库</param>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.WriteToServerAdv``1(System.Data.SqlClient.SqlBulkCopy,System.Collections.Generic.IList{``0},System.Func{System.Data.DataTable,System.Data.DataTable})">
            <summary>
            将lstT中的数据批量写入至目标数据表中
            </summary>
            <typeparam name="T">列表元素对象类型</typeparam>
            <param name="blk">SqlBulkCopy对象</param>
            <param name="lstT">列表数据</param>
            <param name="fnc">传递列表数据转换得到的DataTable,回调函数可以在此回调内移除指定列以达到不回写特定字段至目标库</param>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.WriteToServer``1(System.Data.SqlClient.SqlBulkCopy,System.Collections.Generic.IList{``0})">
            <summary>
            将lstT中的数据批量写入至目标数据表中
            不会将 IBaseEntity 中定义的属性类型写入到表中
            </summary>
            <typeparam name="T">列表元素对象类型</typeparam>
            <param name="blk">SqlBulkCopy对象</param>
            <param name="lstT">列表数据</param>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.WriteToServerAdv``1(System.Data.SqlClient.SqlBulkCopy,System.Collections.Generic.IList{``0},System.String[])">
            <summary>
            将lstT中的数据批量写入至目标数据表中
            不会将 IBaseEntity 中定义的属性类型写入到表中
            </summary>
            <typeparam name="T">列表元素对象类型</typeparam>
            <param name="blk">SqlBulkCopy对象</param>
            <param name="lstT">列表数据</param>
            <param name="excludes">不想被写入的属性列表</param>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.WriteToServerEx``1(System.Data.SqlClient.SqlBulkCopy,System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{Ultra.Web.Core.Common.PropertyMap},System.Func{System.Data.DataTable,System.Data.DataTable})">
            <summary>
            批量插入数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="blk"></param>
            <param name="lstT"></param>
            <param name="fieldMap"></param>
            <param name="defaultVluSet">回调处理方法,可在此方法内通过增加默认值列</param>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.GetObject``1(System.Web.HttpCookie)">
            <summary>
            获取Cookie中存储的序列化对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cke"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.GetClientIP(System.Web.UI.Page)">
            <summary>
            获取 客户端IP
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.GetHost(System.Web.HttpRequest)">
            <summary>
            请求的URL的主机部分：例如 http://www.google.co.uk/image/pic.aspx 将返回 www.google.co.uk
            如果是 http://localhost:8099/..../x.aspx 将返回 localhost:8099
            </summary>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.GetHost(System.Web.UI.Page)">
            <summary>
            请求的URL的主机部分：例如 http://www.google.co.uk/image/pic.aspx 将返回 www.google.co.uk
            </summary>
            <param name="pg"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ultra.Web.Core.Common.MethodExtend.RawUrl(System.Web.UI.Page)" -->
        <!-- Badly formed XML comment ignored for member "M:Ultra.Web.Core.Common.MethodExtend.RequestUrl(System.Web.UI.Page)" -->
        <member name="M:Ultra.Web.Core.Common.MethodExtend.Redirect(System.Web.UI.Page,System.String)">
            <summary>
            Response.Redirect(url)的包装
            </summary>
            <param name="pg"></param>
            <param name="url">要重定位到的目标URL</param>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.FilePathToMapPath(System.Web.UI.Page,System.String)">
            <summary>
            文件全路径转换为服务器相对路径
            </summary>
            <param name="pg"></param>
            <param name="fileFullPath">文件全路径</param>
            <returns>服务器相对路径</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.GetAllClassOfInterface(System.Reflection.Assembly,System.String)">
            <summary>
            获取继承指定接口的所有类型
            若接口类型名称为空则获取所有类型
            </summary>
            <param name="asm"></param>
            <param name="interfaceName">接口类型名称默认为空</param>
            <returns>获取继承指定接口的所有类型</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.GetAllClassOfClass(System.Reflection.Assembly,System.Type)">
            <summary>
            获取程序集内继承自指定类的所有子类列表
            </summary>
            <param name="asm"></param>
            <param name="tbase">指定的基类</param>
            <returns>所有子类列表</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.GetPropertyDesc(System.Reflection.PropertyInfo)">
            <summary>
            获取属性的描述
            </summary>
            <param name="pi">属性</param>
            <returns>属性的描述</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.IsRequired(System.Reflection.PropertyInfo)">
            <summary>
            判断属性类型是否为可空
            </summary>
            <param name="pi">属性</param>
            <returns>不是可空则返回true否则为false</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.GetFieldDesc(System.Reflection.FieldInfo)">
            <summary>
            获取字段描述
            </summary>
            <param name="fi">字段</param>
            <returns>字段描述</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.IsRequired(System.Reflection.FieldInfo)">
            <summary>
            判断字段类型是否为可空
            </summary>
            <param name="fi">字段</param>
            <returns>不是可空则返回true否则为false</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.GetLockBool(System.Boolean)">
            <summary>
            生成并发布尔值实例,支持并发访问
            </summary>
            <param name="b">初始值</param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.RandomBool(System.Boolean)">
            <summary>
            返回随机布尔值
            </summary>
            <param name="b"></param>
            <returns>返回随机布尔值</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.Thumnail(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            生成缩略图
            </summary>
            <param name="img"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.Thumnail(System.Drawing.Image)">
            <summary>
            生成缩略图
            </summary>
            <param name="img"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.ToThumnailImage(System.Byte[],System.Int32,System.Int32)">
            <summary>
            生成缩略图
            </summary>
            <param name="byt"></param>
            <param name="width"></param>
            <param name="heigth"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.ToThumnailImage(System.Byte[])">
            <summary>
            生成缩略图
            </summary>
            <param name="byt"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.GenLiteImage(System.Byte[],System.Int32,System.Int32)">
            <summary>
            生成缩略图
            </summary>
            <param name="imgData"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.GenLiteImage(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            生成缩略图
            </summary>
            <param name="img"></param>
            <param name="width"></param>
            <param name="heigth"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.CopyImage(System.Drawing.Image)">
            <summary>
            复制Image(防止文件占用锁,或是同一对象占用)
            </summary>
            <param name="img"></param>
            <returns>复制后的Image</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.GetBytes(System.Drawing.Image)">
            <summary>
            将Image转换为字节流
            </summary>
            <param name="img"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.SaveImage(System.Web.UI.WebControls.FileUpload,Ultra.Web.Core.Common.UploadImageThumnail@,System.Boolean)">
            <summary>
            保存上传文件
            同时生成缩略图(当bGenLite=true时)
            </summary>
            <param name="fup">文件上传控件</param>
            <param name="thumbnailArg">仅当bGenLite为true时有意义,表示生成缩略图的相关参数</param>
            <param name="bGenLite">是否自动生成图片缩略图</param>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.NewGuidStr(System.Guid)">
            <summary>
            生成Guid.NewGuid().ToString()去掉连接符后的文字内容
            </summary>
            <param name="gid"></param>
            <returns>生成Guid.NewGuid().ToString()去掉连接符后的文字内容</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.Random(System.Int32,System.Security.Cryptography.RNGCryptoServiceProvider)">
            <summary>
            生成随机数
            </summary>
            <param name="maxValue">随机数的最大值</param>
            <param name="rng">随机数生成器</param>
            <returns>生成随机数</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.IsEven(System.Int32)">
            <summary>
            判断数是不是一个偶数
            </summary>
            <param name="i">被判断的数</param>
            <returns>数为偶数则返回true否则为false</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MethodExtend.RandomString(System.String,System.Int32)">
            <summary>
            由keySet 生成随机组合
            </summary>
            <param name="keySet">生成随机组合的源串(字典)</param>
            <param name="stringlength">随机字符串的长度</param>
            <returns></returns>
        </member>
        <member name="T:Ultra.Web.Core.Common.UploadImageThumnail">
            <summary>
            文件上传控件
            上传图片并自动缩略图结构定义
            NOTE:调用者负责初始化 FileSaveAsPath,ThumbWidth,ThumbHeight 的值
            </summary>
        </member>
        <member name="F:Ultra.Web.Core.Common.UploadImageThumnail.FileSaveAsPath">
            <summary>
            文件 被保存到服务器上的路径
            </summary>
        </member>
        <member name="F:Ultra.Web.Core.Common.UploadImageThumnail.FileThumnailPath">
            <summary>
            文件生成的缩略图 被保存到服务器上的路径
            PS:默认生成的缩略图路径与FileSaveAsPath位于同一目录
            但在文件名后跟上 _width_height
            EG:FileSaveAsPath= abc.png
            FileThumbnailPath =abc_200_200.png
            </summary>
        </member>
        <member name="F:Ultra.Web.Core.Common.UploadImageThumnail.ThumWidth">
            <summary>
            欲缩略到的图片宽度
            </summary>
        </member>
        <member name="F:Ultra.Web.Core.Common.UploadImageThumnail.ThumHeight">
            <summary>
            欲缩略到的图片高度
            </summary>
        </member>
        <member name="T:Ultra.Web.Core.Common.PathInfo">
            <summary>
            文件路径信息
            </summary>
        </member>
        <member name="P:Ultra.Web.Core.Common.PathInfo.Drive">
            <summary>
            目录所在盘符 例如:E:\ 
            </summary>
        </member>
        <member name="P:Ultra.Web.Core.Common.PathInfo.Directory">
            <summary>
            目录路径
            </summary>
        </member>
        <member name="P:Ultra.Web.Core.Common.PathInfo.FileName">
            <summary>
            带扩展名的文件名称（EG: xxx.png,xxx.exe,....)
            </summary>
        </member>
        <member name="P:Ultra.Web.Core.Common.PathInfo.FileWithOutExt">
            <summary>
            不带扩展名的文件名称
            </summary>
        </member>
        <member name="P:Ultra.Web.Core.Common.PathInfo.FileExtenName">
            <summary>
            文件扩展名 例如：.bmp,.png,....
            </summary>
        </member>
        <member name="T:Ultra.Web.Core.Common.EnDatePart">
            <summary>
            日期比较部分枚举
            </summary>
        </member>
        <member name="F:Ultra.Web.Core.Common.EnDatePart.NONE">
            <summary>
            NONE
            </summary>
        </member>
        <member name="F:Ultra.Web.Core.Common.EnDatePart.DAY">
            <summary>
            Day
            </summary>
        </member>
        <member name="F:Ultra.Web.Core.Common.EnDatePart.HOUR">
            <summary>
            Hour
            </summary>
        </member>
        <member name="F:Ultra.Web.Core.Common.EnDatePart.MINUTE">
            <summary>
            Minute
            </summary>
        </member>
        <member name="F:Ultra.Web.Core.Common.EnDatePart.SECOND">
            <summary>
            Second
            </summary>
        </member>
        <member name="T:Ultra.Web.Core.Common.EnImageCombinOrd">
            <summary>
            图片叠加的方式枚举
            </summary>
        </member>
        <member name="F:Ultra.Web.Core.Common.EnImageCombinOrd.Normal">
            <summary>
            正片叠底
            </summary>
        </member>
        <member name="F:Ultra.Web.Core.Common.EnImageCombinOrd.Reverse">
            <summary>
            反转叠加
            </summary>
        </member>
        <member name="T:Ultra.Web.Core.Common.DateTimeRange">
            <summary>
            表示日期范围（跨度）
            </summary>
        </member>
        <member name="P:Ultra.Web.Core.Common.DateTimeRange.Begin">
            <summary>
            日期区间开始
            </summary>
        </member>
        <member name="P:Ultra.Web.Core.Common.DateTimeRange.End">
            <summary>
            日期区间结束
            </summary>
        </member>
        <member name="T:Ultra.Web.Core.Common.PropertyMap">
            <summary>
            实体属性/字段名与目标表名映射
            </summary>
        </member>
        <member name="M:Ultra.Web.Core.Common.PropertyMap.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Ultra.Web.Core.Common.PropertyMap.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="pfname"></param>
        </member>
        <member name="M:Ultra.Web.Core.Common.PropertyMap.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="tbField"></param>
            <param name="pfName"></param>
        </member>
        <member name="P:Ultra.Web.Core.Common.PropertyMap.TableFieldName">
            <summary>
            目标表字段名
            </summary>
        </member>
        <member name="P:Ultra.Web.Core.Common.PropertyMap.PropOrFieldName">
            <summary>
            属性/字段名称
            </summary>
        </member>
        <member name="T:Ultra.Web.Core.Common.MoveFileFlags">
            <summary>
            API MoveFileFlags常量
            </summary>
        </member>
        <member name="T:Ultra.Web.Core.Common.InterlockBoolean">
            <summary>
            同步并发布尔值包装类,用于在并发环境中使用布尔类型
            </summary>
        </member>
        <member name="M:Ultra.Web.Core.Common.InterlockBoolean.Create(System.Boolean)">
            <summary>
            生成并发布尔值实例
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.InterlockBoolean.Set(System.Boolean)">
            <summary>
            设置布尔值
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="P:Ultra.Web.Core.Common.InterlockBoolean.Value">
            <summary>
            获取布尔值
            </summary>
        </member>
        <member name="T:Ultra.Web.Core.Common.DirecotyEx">
            <summary>
            文件夹搜索文件扩展类
            </summary>
        </member>
        <member name="M:Ultra.Web.Core.Common.DirecotyEx.EnumerateFiles(System.String,System.String[],System.IO.SearchOption)">
            <summary>
            多条件搜索指定扩展名的文件集合
            *.dll,*.exe
            返回符合条件的文件路径列表集合
            </summary>
            <param name="path">在哪个路径下搜索</param>
            <param name="schpartens">扩展名集合如: *.dll *.exe</param>
            <param name="schopt">SearchOption枚举</param>
            <returns></returns>
        </member>
        <member name="T:Ultra.Web.Core.Common.MySqlHelper">
            <summary>
            MySqlHelper
            </summary>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.AttachParameters(MySql.Data.MySqlClient.MySqlCommand,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            This method is used to attach array of MySqlParameters to a MySqlCommand.
            
            This method will assign a value of DbNull to any parameter with a direction of
            InputOutput and a value of null.  
            
            This behavior will prevent default values from being used, but
            this will be the less common case than an intended pure output parameter (derived as InputOutput)
            where the user provided no input value.
            </summary>
            <param name="command">The command to which the parameters will be added</param>
            <param name="commandParameters">An array of MySqlParameters to be added to command</param>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.AssignParameterValues(MySql.Data.MySqlClient.MySqlParameter[],System.Data.DataRow)">
            <summary>
            This method assigns dataRow column values to an array of MySqlParameters
            </summary>
            <param name="commandParameters">Array of MySqlParameters to be assigned values</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values</param>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.AssignParameterValues(MySql.Data.MySqlClient.MySqlParameter[],System.Object[])">
            <summary>
            This method assigns an array of values to an array of MySqlParameters
            </summary>
            <param name="commandParameters">Array of MySqlParameters to be assigned values</param>
            <param name="parameterValues">Array of objects holding the values to be assigned</param>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.PrepareCommand(MySql.Data.MySqlClient.MySqlCommand,MySql.Data.MySqlClient.MySqlConnection,MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[],System.Boolean@)">
            <summary>
            This method opens (if necessary) and assigns a connection, transaction, command type and parameters 
            to the provided command
            </summary>
            <param name="command">The MySqlCommand to be prepared</param>
            <param name="connection">A valid MySqlConnection, on which to execute this command</param>
            <param name="transaction">A valid MySqlTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-MySql command</param>
            <param name="commandParameters">An array of MySqlParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="mustCloseConnection"><c>true</c> if the connection was opened by the method, otherwose is false.</param>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a MySqlCommand (that returns no resultset and takes no parameters) against the database specified in 
            the connection string
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-MySql command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Execute a MySqlCommand (that returns no resultset) against the database specified in the connection string 
            using the provided parameters
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new MySqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-MySql command</param>
            <param name="commandParameters">An array of MySqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.ExecuteNonQuery(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a MySqlCommand (that returns no resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(connString, "PublishOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a MySqlConnection</param>
            <param name="spName">The name of the stored prcedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.ExecuteNonQuery(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a MySqlCommand (that returns no resultset and takes no parameters) against the provided MySqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connection">A valid MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-MySql command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.ExecuteNonQuery(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Execute a MySqlCommand (that returns no resultset) against the specified MySqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new MySqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-MySql command</param>
            <param name="commandParameters">An array of MySqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.ExecuteNonQuery(MySql.Data.MySqlClient.MySqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a MySqlCommand (that returns no resultset) against the specified MySqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, "PublishOrders", 24, 36);
            </remarks>
            <param name="connection">A valid MySqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.ExecuteNonQuery(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a MySqlCommand (that returns no resultset and takes no parameters) against the provided MySqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="transaction">A valid MySqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-MySql command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.ExecuteNonQuery(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Execute a MySqlCommand (that returns no resultset) against the specified MySqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new MySqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid MySqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-MySql command</param>
            <param name="commandParameters">An array of MySqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.ExecuteNonQuery(MySql.Data.MySqlClient.MySqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a MySqlCommand (that returns no resultset) against the specified 
            MySqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, trans, "PublishOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid MySqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a MySqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-MySql command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Execute a MySqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new MySqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-MySql command</param>
            <param name="commandParameters">An array of MySqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.ExecuteDataset(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a MySqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a MySqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.ExecuteDataset(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a MySqlCommand (that returns a resultset and takes no parameters) against the provided MySqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-MySql command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.ExecuteDataset(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Execute a MySqlCommand (that returns a resultset) against the specified MySqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new MySqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-MySql command</param>
            <param name="commandParameters">An array of MySqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.ExecuteDataset(MySql.Data.MySqlClient.MySqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a MySqlCommand (that returns a resultset) against the specified MySqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid MySqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.ExecuteDataset(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a MySqlCommand (that returns a resultset and takes no parameters) against the provided MySqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid MySqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-MySql command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.ExecuteDataset(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Execute a MySqlCommand (that returns a resultset) against the specified MySqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new MySqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid MySqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-MySql command</param>
            <param name="commandParameters">An array of MySqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.ExecuteDataset(MySql.Data.MySqlClient.MySqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a MySqlCommand (that returns a resultset) against the specified 
            MySqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid MySqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.ExecuteReader(MySql.Data.MySqlClient.MySqlConnection,MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[],Ultra.Web.Core.Common.MySqlHelper.MySqlConnectionOwnership)">
            <summary>
            Create and prepare a MySqlCommand, and call ExecuteReader with the appropriate CommandBehavior.
            </summary>
            <remarks>
            If we created and opened the connection, we want the connection to be closed when the DataReader is closed.
            
            If the caller provided the connection, we want to leave it to them to manage.
            </remarks>
            <param name="connection">A valid MySqlConnection, on which to execute this command</param>
            <param name="transaction">A valid MySqlTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-MySql command</param>
            <param name="commandParameters">An array of MySqlParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="connectionOwnership">Indicates whether the connection parameter was provided by the caller, or created by MySqlHelper</param>
            <returns>MySqlDataReader containing the results of the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a MySqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             MySqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-MySql command</param>
            <returns>A MySqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Execute a MySqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             MySqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders", new MySqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-MySql command</param>
            <param name="commandParameters">An array of MySqlParamters used to execute the command</param>
            <returns>A MySqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.ExecuteReader(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a MySqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             MySqlDataReader dr = ExecuteReader(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a MySqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A MySqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.ExecuteReader(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a MySqlCommand (that returns a resultset and takes no parameters) against the provided MySqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             MySqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-MySql command</param>
            <returns>A MySqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.ExecuteReader(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Execute a MySqlCommand (that returns a resultset) against the specified MySqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             MySqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders", new MySqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-MySql command</param>
            <param name="commandParameters">An array of MySqlParamters used to execute the command</param>
            <returns>A MySqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.ExecuteReader(MySql.Data.MySqlClient.MySqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a MySqlCommand (that returns a resultset) against the specified MySqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             MySqlDataReader dr = ExecuteReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid MySqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A MySqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.ExecuteReader(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a MySqlCommand (that returns a resultset and takes no parameters) against the provided MySqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             MySqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid MySqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-MySql command</param>
            <returns>A MySqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.ExecuteReader(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Execute a MySqlCommand (that returns a resultset) against the specified MySqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
              MySqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new MySqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid MySqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-MySql command</param>
            <param name="commandParameters">An array of MySqlParamters used to execute the command</param>
            <returns>A MySqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.ExecuteReader(MySql.Data.MySqlClient.MySqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a MySqlCommand (that returns a resultset) against the specified
            MySqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             MySqlDataReader dr = ExecuteReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid MySqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A MySqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a MySqlCommand (that returns a 1x1 resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connectionString">A valid connection string for a MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-MySql command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Execute a MySqlCommand (that returns a 1x1 resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount", new MySqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-MySql command</param>
            <param name="commandParameters">An array of MySqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.ExecuteScalar(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a MySqlCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a MySqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.ExecuteScalar(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a MySqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided MySqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connection">A valid MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-MySql command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.ExecuteScalar(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Execute a MySqlCommand (that returns a 1x1 resultset) against the specified MySqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount", new MySqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-MySql command</param>
            <param name="commandParameters">An array of MySqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.ExecuteScalar(MySql.Data.MySqlClient.MySqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a MySqlCommand (that returns a 1x1 resultset) against the specified MySqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connection">A valid MySqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.ExecuteScalar(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a MySqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided MySqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="transaction">A valid MySqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-MySql command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.ExecuteScalar(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Execute a MySqlCommand (that returns a 1x1 resultset) against the specified MySqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new MySqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid MySqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-MySql command</param>
            <param name="commandParameters">An array of MySqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.ExecuteScalar(MySql.Data.MySqlClient.MySqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a MySqlCommand (that returns a 1x1 resultset) against the specified
            MySqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, "GetOrderCount", 24, 36);
            </remarks>
            <param name="transaction">A valid MySqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a MySqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connectionString">A valid connection string for a MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-MySql command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)</param>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Execute a MySqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new MySqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-MySql command</param>
            <param name="commandParameters">An array of MySqlParamters used to execute the command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.FillDataset(System.String,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a MySqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, 24);
            </remarks>
            <param name="connectionString">A valid connection string for a MySqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>    
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.FillDataset(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a MySqlCommand (that returns a resultset and takes no parameters) against the provided MySqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connection">A valid MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-MySql command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>    
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.FillDataset(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Execute a MySqlCommand (that returns a resultset) against the specified MySqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new MySqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid MySqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-MySql command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of MySqlParamters used to execute the command</param>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.FillDataset(MySql.Data.MySqlClient.MySqlConnection,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a MySqlCommand (that returns a resultset) against the specified MySqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(conn, "GetOrders", ds, new string[] {"orders"}, 24, 36);
            </remarks>
            <param name="connection">A valid MySqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.FillDataset(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a MySqlCommand (that returns a resultset and takes no parameters) against the provided MySqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="transaction">A valid MySqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-MySql command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.FillDataset(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Execute a MySqlCommand (that returns a resultset) against the specified MySqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new MySqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid MySqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-MySql command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of MySqlParamters used to execute the command</param>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.FillDataset(MySql.Data.MySqlClient.MySqlTransaction,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a MySqlCommand (that returns a resultset) against the specified 
            MySqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(trans, "GetOrders", ds, new string[]{"orders"}, 24, 36);
            </remarks>
            <param name="transaction">A valid MySqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.FillDataset(MySql.Data.MySqlClient.MySqlConnection,MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Private helper method that execute a MySqlCommand (that returns a resultset) against the specified MySqlTransaction and MySqlConnection
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new MySqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid MySqlConnection</param>
            <param name="transaction">A valid MySqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-MySql command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of MySqlParamters used to execute the command</param>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.UpdateDataset(MySql.Data.MySqlClient.MySqlCommand,MySql.Data.MySqlClient.MySqlCommand,MySql.Data.MySqlClient.MySqlCommand,System.Data.DataSet,System.String)">
            <summary>
            Executes the respective command for each inserted, updated, or deleted row in the DataSet.
            </summary>
            <remarks>
            e.g.:  
             UpdateDataset(conn, insertCommand, deleteCommand, updateCommand, dataSet, "Order");
            </remarks>
            <param name="insertCommand">A valid transact-MySql statement or stored procedure to insert new records into the data source</param>
            <param name="deleteCommand">A valid transact-MySql statement or stored procedure to delete records from the data source</param>
            <param name="updateCommand">A valid transact-MySql statement or stored procedure used to update records in the data source</param>
            <param name="dataSet">The DataSet used to update the data source</param>
            <param name="tableName">The DataTable used to update the data source.</param>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.CreateCommand(MySql.Data.MySqlClient.MySqlConnection,System.String,System.String[])">
            <summary>
            Simplify the creation of a MySql command object by allowing
            a stored procedure and optional parameters to be provided
            </summary>
            <remarks>
            e.g.:  
             MySqlCommand command = CreateCommand(conn, "AddCustomer", "CustomerID", "CustomerName");
            </remarks>
            <param name="connection">A valid MySqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="sourceColumns">An array of string to be assigned as the source columns of the stored procedure parameters</param>
            <returns>A valid MySqlCommand object</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.ExecuteNonQueryTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a MySqlCommand (that returns no resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connectionString">A valid connection string for a MySqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.ExecuteNonQueryTypedParams(MySql.Data.MySqlClient.MySqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a MySqlCommand (that returns no resultset) against the specified MySqlConnection 
            using the dataRow column values as the stored procedure's parameters values.  
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connection">A valid MySqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.ExecuteNonQueryTypedParams(MySql.Data.MySqlClient.MySqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a MySqlCommand (that returns no resultset) against the specified
            MySqlTransaction using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="transaction">A valid MySqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.ExecuteDatasetTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a MySqlCommand (that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connectionString">A valid connection string for a MySqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.ExecuteDatasetTypedParams(MySql.Data.MySqlClient.MySqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a MySqlCommand (that returns a resultset) against the specified MySqlConnection 
            using the dataRow column values as the store procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connection">A valid MySqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.ExecuteDatasetTypedParams(MySql.Data.MySqlClient.MySqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a MySqlCommand (that returns a resultset) against the specified MySqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="transaction">A valid MySqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.ExecuteReaderTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a MySqlCommand (that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connectionString">A valid connection string for a MySqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A MySqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.ExecuteReaderTypedParams(MySql.Data.MySqlClient.MySqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a MySqlCommand (that returns a resultset) against the specified MySqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid MySqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A MySqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.ExecuteReaderTypedParams(MySql.Data.MySqlClient.MySqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a MySqlCommand (that returns a resultset) against the specified MySqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid MySqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A MySqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.ExecuteScalarTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a MySqlCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connectionString">A valid connection string for a MySqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.ExecuteScalarTypedParams(MySql.Data.MySqlClient.MySqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a MySqlCommand (that returns a 1x1 resultset) against the specified MySqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid MySqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelper.ExecuteScalarTypedParams(MySql.Data.MySqlClient.MySqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a MySqlCommand (that returns a 1x1 resultset) against the specified MySqlTransaction
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid MySqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="T:Ultra.Web.Core.Common.MySqlHelper.MySqlConnectionOwnership">
            <summary>
            This enum is used to indicate whether the connection was provided by the caller, or created by MySqlHelper, so that
            we can set the appropriate CommandBehavior when calling ExecuteReader()
            </summary>
        </member>
        <member name="F:Ultra.Web.Core.Common.MySqlHelper.MySqlConnectionOwnership.Internal">
            <summary>Connection is owned and managed by MySqlHelper</summary>
        </member>
        <member name="F:Ultra.Web.Core.Common.MySqlHelper.MySqlConnectionOwnership.External">
            <summary>Connection is owned and managed by the caller</summary>
        </member>
        <member name="T:Ultra.Web.Core.Common.MySqlHelperParameterCache">
            <summary>
            MySqlHelperParameterCache provides functions to leverage a static cache of procedure parameters, and the
            ability to discover parameters for stored procedures at run-time.
            </summary>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelperParameterCache.DiscoverSpParameterSet(MySql.Data.MySqlClient.MySqlConnection,System.String,System.Boolean)">
            <summary>
            Resolve at run time the appropriate set of MySqlParameters for a stored procedure
            </summary>
            <param name="connection">A valid MySqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">Whether or not to include their return value parameter</param>
            <returns>The parameter array discovered.</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelperParameterCache.CloneParameters(MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Deep copy of cached MySqlParameter array
            </summary>
            <param name="originalParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelperParameterCache.CacheParameterSet(System.String,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Add parameter array to the cache
            </summary>
            <param name="connectionString">A valid connection string for a MySqlConnection</param>
            <param name="commandText">The stored procedure name or T-MySql command</param>
            <param name="commandParameters">An array of MySqlParamters to be cached</param>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelperParameterCache.GetCachedParameterSet(System.String,System.String)">
            <summary>
            Retrieve a parameter array from the cache
            </summary>
            <param name="connectionString">A valid connection string for a MySqlConnection</param>
            <param name="commandText">The stored procedure name or T-MySql command</param>
            <returns>An array of MySqlParamters</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelperParameterCache.GetSpParameterSet(System.String,System.String)">
            <summary>
            Retrieves the set of MySqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for a MySqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of MySqlParameters</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelperParameterCache.GetSpParameterSet(System.String,System.String,System.Boolean)">
            <summary>
            Retrieves the set of MySqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for a MySqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of MySqlParameters</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelperParameterCache.GetSpParameterSet(MySql.Data.MySqlClient.MySqlConnection,System.String)">
            <summary>
            Retrieves the set of MySqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid MySqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of MySqlParameters</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelperParameterCache.GetSpParameterSet(MySql.Data.MySqlClient.MySqlConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of MySqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid MySqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of MySqlParameters</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.MySqlHelperParameterCache.GetSpParameterSetInternal(MySql.Data.MySqlClient.MySqlConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of MySqlParameters appropriate for the stored procedure
            </summary>
            <param name="connection">A valid MySqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of MySqlParameters</returns>
        </member>
        <member name="T:Ultra.Web.Core.Common.ObjectDataMaper`1">
            <summary>
            实体对象与DataTable的映射转换帮助类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Ultra.Web.Core.Common.ObjectDataMaper`1.GetDataTableSechma">
            <summary>
            根据类型获取类型对应的DataTable结构
            NOTE:会将类型中所有的公共属性反应到返回DataTable中
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.ObjectDataMaper`1.GetDataTableSechmaEx(System.String[])">
            <summary>
            根据类型获取类型对应的DataTable结构
            NOTE:会将参数中指定的公共属性或公共字段反射到返回DataTable中
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.ObjectDataMaper`1.GetTableSechma">
            <summary>
            根据类型获取类型对应的DataTable结构
            NOTE:会将类型中所有的公共属性反应到返回DataTable中
            </summary>
        </member>
        <member name="M:Ultra.Web.Core.Common.ObjectDataMaper`1.DataTableSechma(System.String[])">
            <summary>
            根据类型获取类型对应的DataTable结构
            </summary>
            <param name="propertyArgs">欲反射到返回的DataTable中的属性字段名称(区分大小写)</param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.ObjectDataMaper`1.DataTableSechmaEx(System.String[],System.Collections.Generic.List{System.Reflection.PropertyInfo}@,System.Collections.Generic.List{System.Reflection.FieldInfo}@)">
            <summary>
            根据类型获取类型对应的DataTable结构
            NOTE:会将参数中指定的公共属性或公共字段反射到返回DataTable中
            </summary>
            <param name="propOrFields"></param>
            <returns></returns>
        </member>
        <member name="P:Ultra.Web.Core.Common.ObjectDataMaper`1.Entity">
            <summary>
            实体的静态唯一实例
            </summary>
        </member>
        <member name="T:Ultra.Web.Core.Common.ObjectHelper">
            <summary>
            对象操作帮助类
            </summary>
        </member>
        <member name="M:Ultra.Web.Core.Common.ObjectHelper.GetAllProperty(System.Type)">
            <summary>
            取得所有公共属性
            </summary>        
            <param name="t">类型变量</param>
            <returns>取得所有公共属性</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.ObjectHelper.GetProPerty``1">
            <summary>
            取得所有公共属性
            </summary>
            <typeparam name="T">类型</typeparam>
            <returns>取得所有公共属性</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.ObjectHelper.GetField``1">
            <summary>
            取得所有公共字段
            </summary>
            <typeparam name="T">类型</typeparam>
            <returns>取得所有公共字段</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.ObjectHelper.GetAllField(System.Type)">
            <summary>
            取得所有公共字段
            </summary>
            <param name="t">类型变量</param>
            <returns>取得所有公共字段</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.ObjectHelper.ResloveSelfProperty``1(System.Data.DataRow)">
            <summary>
            反射自身类型以设置自身属性值
            </summary>
            <param name="dr">数据行</param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.ObjectHelper.Create``1(System.Data.DataRow)">
            <summary>
            根据 dr 给定的DataRow数据创建实例
            </summary>
            <param name="dr">DataRow数据</param>
            <returns>创建的实例,若dr无数据或dr为null则返回null</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.ObjectHelper.Create``1(System.Data.DataRow[])">
            <summary>
            根据 drs 给定的DataRow数据创建T的List实例集
            </summary>
            <param name="drs">DataRow数据</param>
            <returns>创建T的List实例集,若drs长度为0或drs为null则返回null</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.ObjectHelper.Create``1(System.Data.DataRowCollection)">
            <summary>
            根据 drcolection 给定的DataRow数据创建T的List实例集
            </summary>
            <param name="drcolection">DataRow数据</param>
            <returns>创建T的List实例集,若drs长度为0或drs为null则返回null</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.ObjectHelper.Create``1(System.Data.DataTable)">
            <summary>
            根据 dt 给定的DataRow数据创建T的List实例集
            </summary>
            <param name="drcolection">DataRow数据</param>
            <returns>创建T的List实例集,若drs长度为0或drs为null则返回null</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.ObjectHelper.Serialize``1(``0)">
            <summary>
            序列化对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objs"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.ObjectHelper.SerializeJson(System.Object)">
            <summary>
            序列化对象为Json串
            </summary>
            <param name="obj">要被序列化的对象</param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.ObjectHelper.DeSerialize``1(System.String)">
            <summary>
            反序列化对象
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="jsonstr">Json串</param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.ObjectHelper.DeSerialize``1(System.Byte[])">
            <summary>
            反序列化对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="byts"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.ObjectHelper.DeepCopy``1(``0)">
            <summary>
            深表复制对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objsrc"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.ObjectHelper.IsInheritInterface(System.String,System.Type)">
            <summary>
            判断指定的类型是否实现某个接口
            </summary>
            <param name="interfaceName">接口名称</param>
            <param name="t">欲判断的类型</param>
            <returns>类型是否实现接口，实现返回true否则为false</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.ObjectHelper.IsInheritClass(System.Type,System.Type)">
            <summary>
            判断类型 t 是否是 tbase的子类
            </summary>
            <param name="tbase"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.ObjectHelper.GetAllClassOfInterface(System.String,System.String)">
            <summary>
            从指定程序集中获取继承指定接口的所有类型
            若接口类型名称为空则获取所有类型
            </summary>
            <param name="asmFile">程序集路径</param>
            <param name="interfaceName">接口类型名称默认为空</param>
            <returns>获取继承指定接口的所有类型</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.ObjectHelper.GetAllClassOfInterface(System.Reflection.Assembly,System.String)">
            <summary>
            从指定程序集中获取继承指定接口的所有类型
            若接口类型名称为空则获取所有类型
            </summary>
            <param name="asm">程序集</param>
            <param name="interfaceName">接口类型名称默认为空</param>
            <returns>获取继承指定接口的所有类型</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.ObjectHelper.GetAllClassOfClass(System.Type,System.String)">
            <summary>
            从指定程序集中获取继承指定类的所有类型
            </summary>
            <param name="tbase">基类类型</param>
            <param name="asmFile">程序集路径</param>
            <returns>继承指定类的所有类型</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.ObjectHelper.GetAllClassOfClass(System.Type,System.Reflection.Assembly)">
            <summary>
            从指定程序集中获取继承指定类的所有类型
            </summary>
            <param name="tbase">基类类型</param>
            <param name="asm">程序集</param>
            <returns>继承指定类的所有类型</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.ObjectHelper.LoadAsm(System.String)">
            <summary>
            装载程序 集 (内存装载，不占用文件锁)
            </summary>
            <param name="asmFile"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.ObjectHelper.GetPropertyDesc(System.Reflection.PropertyInfo)">
            <summary>
            获取属性的描述
            </summary>
            <param name="pi">属性数据</param>
            <returns>属性的描述</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.ObjectHelper.GetFieldDesc(System.Reflection.FieldInfo)">
            <summary>
            获取字段描述
            </summary>
            <param name="fi">字段</param>
            <returns>字段描述</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.ObjectHelper.IsRequired(System.Reflection.PropertyInfo)">
            <summary>
            判断属性类型是否为可空
            </summary>
            <param name="pi">属性</param>
            <returns>不是可空则返回true否则为false</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.ObjectHelper.IsRequired(System.Reflection.FieldInfo)">
            <summary>
            判断字段类型是否为可空
            </summary>
            <param name="fi">字段</param>
            <returns>不是可空则返回true否则为false</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.ObjectHelper.GetTypeUseage(System.Reflection.PropertyInfo)">
            <summary>
            获取类型表示文字
            </summary>
            <param name="pi"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.ObjectHelper.GetTypeUseage(System.Reflection.FieldInfo)">
            <summary>
            获取类型表示文字
            </summary>
            <param name="pi"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.ObjectHelper.IsNumber(System.Reflection.PropertyInfo)">
            <summary>
            判断属性类型是否为数值
            </summary>
            <param name="pi">属性</param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.ObjectHelper.IsDateTime(System.Reflection.PropertyInfo)">
            <summary>
            判断属性是否是日期
            </summary>
            <param name="pi"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.ObjectHelper.IsBool(System.Reflection.PropertyInfo)">
            <summary>
            是否布尔类型
            </summary>
            <param name="pi"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.ObjectHelper.IsGuid(System.Reflection.PropertyInfo)">
            <summary>
            是否Guid类型
            </summary>
            <param name="pi">属性</param>
            <returns></returns>
        </member>
        <member name="T:Ultra.Web.Core.Common.DynamicFactory">
            <summary>
            動態類型創建工具
            將類型的屬性創建為公有字段並填充值
            </summary>
        </member>
        <member name="T:Ultra.Web.Core.Common.RSAEncrypt">
            <summary>
            RSA加密服务帮助类
            </summary>
        </member>
        <member name="M:Ultra.Web.Core.Common.RSAEncrypt.Encrypt(System.Byte[],System.String)">
            <summary>
            RSA加密
            </summary>
            <param name="srcData">源数据</param>
            <param name="keyPub">加密密钥</param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.RSAEncrypt.Decrypt(System.Byte[],System.String)">
            <summary>
            RSA解密
            </summary>
            <param name="srcData">源数据</param>
            <param name="keyPri">解密密钥</param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlAsyncExecuter.Execute(System.String)">
            <summary>
            异步执行SQL
            </summary>
            <param name="sql"></param>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlAsyncExecuter.ExecuteSqlFile(System.String)">
            <summary>
            异步执行SQL
            </summary>
            <param name="sqlFilePath"></param>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelper.MakeInParam(System.String,System.Data.SqlDbType,System.Int32,System.Object)">
            <summary>
            定义参数.
            </summary>
            <param name="ParamName">Name of param.</param>
            <param name="DbType">Param type.</param>
            <param name="Size">Param size.</param>
            <param name="Value">Param value.</param>
            <returns>New parameter.</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelper.MakeOutParam(System.String,System.Data.SqlDbType,System.Int32)">
            <summary>
            定义参数.
            </summary>
            <param name="ParamName">Name of param.</param>
            <param name="DbType">Param type.</param>
            <param name="Size">Param size.</param>
            <returns>New parameter.</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelper.MakeOutParam(System.String,System.Data.SqlDbType,System.Int32,System.Object)">
            <summary>
            定义参数.
            </summary>
            <param name="ParamName">Name of param.</param>
            <param name="DbType">Param type.</param>
            <param name="Size">Param size.</param>
            <returns>New parameter.</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelper.MakeParam(System.String,System.Data.SqlDbType,System.Int32,System.Data.ParameterDirection,System.Object)">
            <summary>
            定义参数
            </summary>
            <param name="ParamName">Name of param.</param>
            <param name="DbType">Param type.</param>
            <param name="Size">Param size.</param>
            <param name="Direction">Parm direction.</param>
            <param name="Value">Param value.</param>
            <returns>New parameter.</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelper.AttachParameters(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlParameter[])">
            <summary>
            配置参数
            
            </summary>
            <param name="command">The command to which the parameters will be added</param>
            <param name="commandParameters">an array of SqlParameters tho be added to command</param>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Object[])">
            <summary>
            This method assigns an array of values to an array of SqlParameters.
            </summary>
            <param name="commandParameters">array of SqlParameters to be assigned values</param>
            <param name="parameterValues">array of objects holding the values to be assigned</param>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelper.PrepareCommand(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            命令 
            </summary>
            <param name="command">the SqlCommand to be prepared</param>
            <param name="connection">a valid SqlConnection, on which to execute this command</param>
            <param name="transaction">a valid SqlTransaction, or 'null'</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelper.ExecuteNonQueryResult(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            queryResult
            </summary>
            <param name="connection"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelper.ExecuteNonQuery(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(connString, "PublishOrders", 24, 36);
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="spName">the name of the stored prcedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, "PublishOrders", 24, 36);
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, trans, "PublishOrders", 24, 36);
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelper.ExecuteDataset(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelper.ExecuteDataTable(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             DataTable dt = ExecuteDataTable(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>a DataTable containing the resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelper.ExecuteDataTable(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataTable dt = ExecuteDataTable(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>a DataTable containing the resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelper.ExecuteDataTable(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             DataTable dt = ExecuteDataTable(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>a DataTable containing the resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelper.ExecuteDataTable(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataTable dt = ExecuteDataTable(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>a DataTable containing the resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelper.ExecuteDataTable(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             DataTable dt = ExecuteDataTable(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>a DataTable containing the resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelper.ExecuteDataTable(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataTable dt = ExecuteDataTable(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>a DataTable containing the resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],Ultra.Web.Core.Common.SqlHelper.SqlConnectionOwnership)">
            <summary>
            Create and prepare a SqlCommand, and call ExecuteReader with the appropriate CommandBehavior.
            </summary>
            <remarks>
            If we created and opened the connection, we want the connection to be closed when the DataReader is closed.
            
            If the caller provided the connection, we want to leave it to them to manage.
            </remarks>
            <param name="connection">a valid SqlConnection, on which to execute this command</param>
            <param name="transaction">a valid SqlTransaction, or 'null'</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="connectionOwnership">indicates whether the connection parameter was provided by the caller, or created by SqlHelper</param>
            <returns>SqlDataReader containing the results of the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>a SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>a SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelper.ExecuteReader(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>a SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>a SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>a SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
              SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>a SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelper.ExecuteScalar(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, "GetOrderCount", 24, 36);
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <returns>an XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>an XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="spName">the name of the stored procedure using "FOR XML AUTO"</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <returns>an XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>an XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelper.AsyncExecute(System.String,System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            <summary>
            异步执行SQL
            </summary>
            <param name="connstr"></param>
            <param name="sql"></param>
            <param name="cmdtype"></param>
            <param name="prms"></param>
        </member>
        <member name="T:Ultra.Web.Core.Common.SqlHelper.SqlConnectionOwnership">
            <summary>
            this enum is used to indicate whether the connection was provided by the caller, or created by SqlHelper, so that
            we can set the appropriate CommandBehavior when calling ExecuteReader()
            </summary>
        </member>
        <member name="T:Ultra.Web.Core.Common.SqlHelperParameterCache">
            <summary>
            SqlHelperParameterCache provides functions to leverage a static cache of procedure parameters, and the
            ability to discover parameters for stored procedures at run-time.
            </summary>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelperParameterCache.DiscoverSpParameterSet(System.String,System.String,System.Boolean)">
            <summary>
            resolve at run time the appropriate set of SqlParameters for a stored procedure
            </summary>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="includeReturnValueParameter">whether or not to include their return value parameter</param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelperParameterCache.CacheParameterSet(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            add parameter array to the cache
            </summary>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters to be cached</param>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelperParameterCache.GetCachedParameterSet(System.String,System.String)">
            <summary>
            retrieve a parameter array from the cache
            </summary>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>an array of SqlParamters</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <returns>an array of SqlParameters</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="includeReturnValueParameter">a bool value indicating whether the return value parameter should be included in the results</param>
            <returns>an array of SqlParameters</returns>
        </member>
        <member name="T:Ultra.Web.Core.Common.SystemInvoke">
            <summary>
            系统调用
            </summary>
        </member>
        <member name="M:Ultra.Web.Core.Common.SystemInvoke.ShellExecute(System.IntPtr,System.String,System.String,System.String,System.String,Ultra.Web.Core.Common.SystemInvoke.ShowCommands)">
            <summary>
            Shell 打开
            </summary>
            <param name="hwnd"></param>
            <param name="lpOperation"></param>
            <param name="lpFile"></param>
            <param name="lpParameters"></param>
            <param name="lpDirectory"></param>
            <param name="nShowCmd"></param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.SystemInvoke.OpenFile(System.String)">
            <summary>
            打开文件
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Ultra.Web.Core.Common.SystemInvoke.SendWindowCloseKey">
            <summary>
            发送 Alt+F4
            </summary>
        </member>
        <member name="M:Ultra.Web.Core.Common.SystemInvoke.SendPrtSc">
            <summary>
            发送 截屏键
            </summary>
        </member>
        <member name="M:Ultra.Web.Core.Common.SystemInvoke.StartProcess(System.String,System.String,System.EventHandler)">
            <summary>
            构建一个可启动(随后即可直接调用Start())的进程
            </summary>
            <param name="procFileName">进程EXE文件路径</param>
            <param name="args">进程参数,可为null</param>
            <param name="exitHandler">进程退出时的通知事件回调,可为null</param>
            <returns>返回创建完成等待Start的进程</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.UltraDynamic.Calc(System.String)">
            <summary>
            计算一个运算表达式,结果以字符串返回.
            </summary>
            <param name="src">运算表达式.例如:3*5+8/2-1</param>
            <returns>表达式计算完成后的结果</returns>
        </member>
        <member name="M:Ultra.Web.Core.Common.UltraDynamic.GenCode(System.String)">
            <summary>
            调用代码模板(GencodeFormat中定义)生成源代码类文件源码
            </summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="P:Ultra.Web.Core.Common.UltraDynamic.Default">
            <summary>
            默认实例
            </summary>
        </member>
        <member name="P:Ultra.Web.Core.Common.UltraDynamic.GencodeFormat">
            <summary>
            生成的调用模板类代码模板
            </summary>
        </member>
        <member name="T:Ultra.Web.Core.Configuration.OptionConfig">
            <summary>
            用户自定义的相关配置
            </summary>
        </member>
        <member name="T:Ultra.Web.Core.Interface.IOptionConfig">
            <summary>
            自定义配置操作接口声明
            </summary>
        </member>
        <member name="M:Ultra.Web.Core.Interface.IOptionConfig.Set``1(System.String,``0)">
            <summary>
            将配置保存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="keyName">配置标识名称</param>
            <param name="value">配置值</param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Interface.IOptionConfig.Get``1(System.String)">
            <summary>
            读取配置值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="keyName">配置标识名称</param>
            <returns>配置值</returns>
        </member>
        <member name="F:Ultra.Web.Core.Configuration.OptionConfig.RootNode">
            <summary>
            "RootConfig"
            </summary>
        </member>
        <member name="F:Ultra.Web.Core.Configuration.OptionConfig.NodeItem">
            <summary>
            "item"
            </summary>
        </member>
        <member name="F:Ultra.Web.Core.Configuration.OptionConfig.NodeItemName">
            <summary>
            "name"
            </summary>
        </member>
        <member name="F:Ultra.Web.Core.Configuration.OptionConfig.NodeItemValue">
            <summary>
            "value"
            </summary>
        </member>
        <member name="M:Ultra.Web.Core.Configuration.OptionConfig.CreateOptionConfigFile">
            <summary>
            获取全局的可选应用程序配置的XDocument操作对象
            </summary>
            <returns>可选应用程序配置的XDocument操作对象</returns>
        </member>
        <member name="M:Ultra.Web.Core.Configuration.OptionConfig.Each``1(System.Func{System.Xml.Linq.XElement,``0})">
            <summary>
            对配置节进行迭代
            </summary>
            <typeparam name="T"></typeparam>
            <param name="func">迭代函数</param>
            <returns>迭代函数返回的集合</returns>
        </member>
        <member name="M:Ultra.Web.Core.Configuration.OptionConfig.EachDef``1">
            <summary>
            对配置节进行迭代，并以Json反序列化的方式返指定类型的集合
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Configuration.OptionConfig.Set``1(System.String,``0)">
            <summary>
            将配置保存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="keyName">配置标识名称</param>
            <param name="value">配置值</param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Configuration.OptionConfig.SetCData``1(System.String,``0)">
            <summary>
            写入CDATA数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="keyName">节点名称</param>
            <param name="value">CDATA数据</param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Configuration.OptionConfig.Remove(System.Collections.Generic.List{System.String})">
            <summary>
            移除指定的节点
            </summary>
            <param name="keyName">节点名称列表</param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Configuration.OptionConfig.Remove(System.String)">
            <summary>
            移除指定的节点
            </summary>
            <param name="keyName">节点名称</param>
            <returns></returns>
        </member>
        <member name="M:Ultra.Web.Core.Configuration.OptionConfig.GetCData``1(System.String,System.Func{System.String,``0})">
            <summary>
            读取配置值
            NOTE:如果指定的类型不存在则返回T类型对应的默认值(对于引用类型则为null)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="keyName">配置标识名称</param>
            <param name="fnc">反序列化回调,若不为null则调用此回调.否则默认执行json反序列化</param>
            <returns>配置值</returns>
        </member>
        <member name="M:Ultra.Web.Core.Configuration.OptionConfig.FindItem(System.String,System.Xml.Linq.XDocument)">
            <summary>
            查找与指定关键字匹配的节点
            </summary>
            <param name="keyname">配置名称标识</param>
            <returns>匹配的节点</returns>
        </member>
        <member name="M:Ultra.Web.Core.Configuration.OptionConfig.Get``1(System.String)">
            <summary>
            读取配置值
            NOTE:如果指定的类型不存在则返回T类型对应的默认值(对于引用类型则为null,对于值类型则取决于具体的值类型)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="keyName">配置标识名称</param>
            <returns>配置值</returns>
        </member>
        <member name="P:Ultra.Web.Core.Configuration.OptionConfig.OptionConfigFileName">
            <summary>
            全局的可选应用程序配置信息保存文件名
            </summary>
        </member>
        <member name="P:Ultra.Web.Core.Configuration.OptionConfig.OptionConfigSitePrefix">
            <summary>
            全局的可选应用程序配置信息保存文件在站点上的目录
            </summary>
        </member>
        <member name="P:Ultra.Web.Core.Configuration.OptionConfig.OptionConfigWebFileName">
            <summary>
            全局的可选应用程序配置信息保存文件在站点服务器上的物理路径
            </summary>
        </member>
        <member name="P:Ultra.Web.Core.Configuration.OptionConfig.OptionConfigAppFileName">
            <summary>
            全局的可选应用程序配置信息保存文件的物理路径
            </summary>
        </member>
        <member name="P:Ultra.Web.Core.Configuration.OptionConfig.OptionConfigFile">
            <summary>
            配置文件路径
            </summary>
        </member>
        <member name="P:Ultra.Web.Core.Configuration.OptionConfig.OptionConfigType">
            <summary>
            配置应用于的程序类型
            </summary>
        </member>
        <member name="F:Ultra.Web.Core.Configuration.EnOptionConfigType.Web">
            <summary>
            For Web
            </summary>
        </member>
        <member name="F:Ultra.Web.Core.Configuration.EnOptionConfigType.App">
            <summary>
            For App
            </summary>
        </member>
        <member name="F:Ultra.Web.Core.Configuration.EnOptionConfigType.Optional">
            <summary>
            For Custom Define
            </summary>
        </member>
        <member name="T:Ultra.Web.Core.Interface.IBaseEntity">
            <summary>
            基础实现接口
            </summary>
        </member>
        <member name="P:Ultra.Web.Core.Interface.IBaseEntity.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Ultra.Web.Core.Interface.IBaseEntity.Guid">
            <summary>
            Guid
            </summary>
        </member>
        <member name="P:Ultra.Web.Core.Interface.IBaseEntity.UISelected">
            <summary>
            UI选中状态
            </summary>
        </member>
    </members>
</doc>
